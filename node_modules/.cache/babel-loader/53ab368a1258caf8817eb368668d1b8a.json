{"ast":null,"code":"// 基于axios封装，网络请求的函数\nimport axios from 'axios'; // axios.create()创建一个带配置项的自定义axios函数\n// myAxios请求的时候，地址baseURL+url，然后去请求服务器\n\nexport const myAxios = axios.create({\n  baseURL: 'http://big-event-vue-api-t.itheima.net'\n});\nexport const myAxiosNew = axios.create({\n  baseURL: 'https://b2de4f056142.akimitsu.top/'\n}); // 定义响应拦截器\n\nmyAxiosNew.interceptors.response.use(function (response) {\n  // 响应http状态码为2xx或3xx时触发成功的回调，形参中的“response”是“成功的结果”\n  // return到axios原地Promise对象，作为成功的结果\n  return response;\n}, function (err) {\n  console.dir(err); // token过期，所以要返回登录，并且清空vuex\n\n  if (err.response.status === 401) {\n    // store.commit('updataToken', '')\n    // store.commit('updateUserInfo', {})\n    // router.push('/login')\n    Message.error('登录失败');\n  } // 响应状态码为4xx，5xx时触发失败的回调，形参中的error是“失败的结果”\n  // return到axios原地Promise对象，作为失败拒绝的状态（如果那边用try+catch或者catch捕获，\n  // 可以捕获到我们传递过去的这个err变量的值）\n\n\n  return Promise.reject(err);\n}); // 导出axios自定义函数\n// export default myAxios\n// export default myAxiosNew","map":{"version":3,"names":["axios","myAxios","create","baseURL","myAxiosNew","interceptors","response","use","err","console","dir","status","Message","error","Promise","reject"],"sources":["C:/Users/26421/Desktop/PTSFD/src/utils/request.js"],"sourcesContent":["// 基于axios封装，网络请求的函数\r\nimport axios from 'axios'\r\n\r\n// axios.create()创建一个带配置项的自定义axios函数\r\n// myAxios请求的时候，地址baseURL+url，然后去请求服务器\r\nexport const myAxios = axios.create({\r\n  baseURL: 'http://big-event-vue-api-t.itheima.net'\r\n})\r\nexport const myAxiosNew = axios.create({\r\n  baseURL: 'https://b2de4f056142.akimitsu.top/'\r\n})\r\n// 定义响应拦截器\r\nmyAxiosNew.interceptors.response.use(function (response) {\r\n  // 响应http状态码为2xx或3xx时触发成功的回调，形参中的“response”是“成功的结果”\r\n  // return到axios原地Promise对象，作为成功的结果\r\n  return response\r\n}, function (err) {\r\n  console.dir(err)\r\n  // token过期，所以要返回登录，并且清空vuex\r\n  if (err.response.status === 401) {\r\n    // store.commit('updataToken', '')\r\n    // store.commit('updateUserInfo', {})\r\n    // router.push('/login')\r\n    Message.error('登录失败')\r\n  }\r\n  // 响应状态码为4xx，5xx时触发失败的回调，形参中的error是“失败的结果”\r\n  // return到axios原地Promise对象，作为失败拒绝的状态（如果那边用try+catch或者catch捕获，\r\n  // 可以捕获到我们传递过去的这个err变量的值）\r\n  return Promise.reject(err)\r\n}\r\n)\r\n// 导出axios自定义函数\r\n// export default myAxios\r\n// export default myAxiosNew\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;EAClCC,OAAO,EAAE;AADyB,CAAb,CAAhB;AAGP,OAAO,MAAMC,UAAU,GAAGJ,KAAK,CAACE,MAAN,CAAa;EACrCC,OAAO,EAAE;AAD4B,CAAb,CAAnB,C,CAGP;;AACAC,UAAU,CAACC,YAAX,CAAwBC,QAAxB,CAAiCC,GAAjC,CAAqC,UAAUD,QAAV,EAAoB;EACvD;EACA;EACA,OAAOA,QAAP;AACD,CAJD,EAIG,UAAUE,GAAV,EAAe;EAChBC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EADgB,CAEhB;;EACA,IAAIA,GAAG,CAACF,QAAJ,CAAaK,MAAb,KAAwB,GAA5B,EAAiC;IAC/B;IACA;IACA;IACAC,OAAO,CAACC,KAAR,CAAc,MAAd;EACD,CARe,CAShB;EACA;EACA;;;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeP,GAAf,CAAP;AACD,CAjBD,E,CAmBA;AACA;AACA"},"metadata":{},"sourceType":"module"}