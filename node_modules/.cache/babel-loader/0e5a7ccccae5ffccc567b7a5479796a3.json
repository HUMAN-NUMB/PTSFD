{"ast":null,"code":"// 基于axios封装，网络请求的函数\nimport axios from 'axios';\nimport { Message } from 'element-ui'; // axios.create()创建一个带配置项的自定义axios函数\n// myAxios请求的时候，地址baseURL+url，然后去请求服务器\n\nexport const myAxios = axios.create({\n  baseURL: 'http://big-event-vue-api-t.itheima.net'\n});\nexport const myAxiosNew = axios.create({\n  baseURL: 'https://b2de4f056142.akimitsu.top/'\n});\nexport const myAxiosNewFromYiYan = axios.create({\n  baseURL: 'https://v1.hitokoto.cn'\n}); // 定义响应拦截器--针对登录失败和注册失败\n\nmyAxiosNew.interceptors.response.use(function (response) {\n  // 响应http状态码为2xx或3xx时触发成功的回调，形参中的“response”是“成功的结果”\n  // return到axios原地Promise对象，作为成功的结果\n  console.log(response.request);\n  return response;\n}, function (err) {\n  console.dir(err); // 登录失败的情况，提示\n\n  if (err.response.status === 401) {\n    Message.error('登录失败');\n  } else if (err.response.status === 400) {\n    Message.error('表单提交有误!');\n  } // 响应状态码为4xx，5xx时触发失败的回调，形参中的error是“失败的结果”\n  // return到axios原地Promise对象，作为失败拒绝的状态（如果那边用try+catch或者catch捕获，\n  // 可以捕获到我们传递过去的这个err变量的值）\n\n\n  return Promise.reject(err);\n}); // 导出axios自定义函数\n// export default myAxios\n// export default myAxiosNew","map":{"version":3,"names":["axios","Message","myAxios","create","baseURL","myAxiosNew","myAxiosNewFromYiYan","interceptors","response","use","console","log","request","err","dir","status","error","Promise","reject"],"sources":["C:/Users/26421/Desktop/PTSFD/src/utils/request.js"],"sourcesContent":["// 基于axios封装，网络请求的函数\r\nimport axios from 'axios'\r\nimport { Message } from 'element-ui'\r\n// axios.create()创建一个带配置项的自定义axios函数\r\n// myAxios请求的时候，地址baseURL+url，然后去请求服务器\r\nexport const myAxios = axios.create({\r\n  baseURL: 'http://big-event-vue-api-t.itheima.net'\r\n})\r\nexport const myAxiosNew = axios.create({\r\n  baseURL: 'https://b2de4f056142.akimitsu.top/'\r\n})\r\nexport const myAxiosNewFromYiYan = axios.create({\r\n  baseURL: 'https://v1.hitokoto.cn'\r\n})\r\n// 定义响应拦截器--针对登录失败和注册失败\r\nmyAxiosNew.interceptors.response.use(function (response) {\r\n  // 响应http状态码为2xx或3xx时触发成功的回调，形参中的“response”是“成功的结果”\r\n  // return到axios原地Promise对象，作为成功的结果\r\n  console.log(response.request)\r\n  return response\r\n}, function (err) {\r\n  console.dir(err)\r\n  // 登录失败的情况，提示\r\n  if (err.response.status === 401) {\r\n    Message.error('登录失败')\r\n  } else if (err.response.status === 400) {\r\n    Message.error('表单提交有误!')\r\n  }\r\n  // 响应状态码为4xx，5xx时触发失败的回调，形参中的error是“失败的结果”\r\n  // return到axios原地Promise对象，作为失败拒绝的状态（如果那边用try+catch或者catch捕获，\r\n  // 可以捕获到我们传递过去的这个err变量的值）\r\n  return Promise.reject(err)\r\n}\r\n)\r\n// 导出axios自定义函数\r\n// export default myAxios\r\n// export default myAxiosNew\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB,C,CACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EAClCC,OAAO,EAAE;AADyB,CAAb,CAAhB;AAGP,OAAO,MAAMC,UAAU,GAAGL,KAAK,CAACG,MAAN,CAAa;EACrCC,OAAO,EAAE;AAD4B,CAAb,CAAnB;AAGP,OAAO,MAAME,mBAAmB,GAAGN,KAAK,CAACG,MAAN,CAAa;EAC9CC,OAAO,EAAE;AADqC,CAAb,CAA5B,C,CAGP;;AACAC,UAAU,CAACE,YAAX,CAAwBC,QAAxB,CAAiCC,GAAjC,CAAqC,UAAUD,QAAV,EAAoB;EACvD;EACA;EACAE,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,OAArB;EACA,OAAOJ,QAAP;AACD,CALD,EAKG,UAAUK,GAAV,EAAe;EAChBH,OAAO,CAACI,GAAR,CAAYD,GAAZ,EADgB,CAEhB;;EACA,IAAIA,GAAG,CAACL,QAAJ,CAAaO,MAAb,KAAwB,GAA5B,EAAiC;IAC/Bd,OAAO,CAACe,KAAR,CAAc,MAAd;EACD,CAFD,MAEO,IAAIH,GAAG,CAACL,QAAJ,CAAaO,MAAb,KAAwB,GAA5B,EAAiC;IACtCd,OAAO,CAACe,KAAR,CAAc,SAAd;EACD,CAPe,CAQhB;EACA;EACA;;;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAf,CAAP;AACD,CAjBD,E,CAmBA;AACA;AACA"},"metadata":{},"sourceType":"module"}