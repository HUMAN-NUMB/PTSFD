{"ast":null,"code":"// 封装的是具体的接口请求方法\n// 注意：每个方法只负责请求一个url地址\nimport { myAxios, myAxiosNew } from '@/utils/request'; // import {  } from '@/utils/request'\n// 引入store\n\nimport store from '../store/index'; // 旧注册\n\nexport const getListAPI = ({\n  username,\n  password,\n  repassword\n}) => {\n  // 原地是一个Promise对象（内部包含原生ajax请求）\n  // return这个Promise对象到逻辑页面，去那边对Promise对象提取结果\n  return myAxios({\n    url: '/api/reg',\n    method: 'POST',\n    // axios传参params，data\n    // params的对象参数名和值，axios源码会把参数和值，拼接在url?后面给后台（query查询字符串）\n    // data的对象参数名和值，axios源码会把参数和值，拼接在请求体里（body参数）\n    data: {\n      username,\n      password,\n      repassword\n    }\n  });\n}; // 新注册\n\n/**\r\n *\r\n * @param {*} param0 {username:用户名，password:密码}\r\n * @returns Promise对象\r\n */\n// 旧登录\n\nexport const loginAPI = ({\n  username,\n  password\n}) => {\n  return myAxios({\n    url: '/api/login',\n    method: 'POST',\n    data: {\n      username,\n      password\n    }\n  });\n}; // 新登录\n\nexport const loginAPINew = ({\n  username,\n  password\n}) => {\n  return myAxiosNew({\n    url: '/user/auth',\n    method: 'POST',\n    data: {\n      username,\n      password\n    }\n  });\n}; // 获得用户信息--旧\n\nexport const getUserInfoAPI = () => {\n  return myAxios({\n    url: '/my/userinfo',\n    // method不屑默认就是‘get’方式请求\n    method: 'GET',\n    // 传参给后台：params（查询字符串query）、data（请求体body）、headers（请求头）\n    // 由于this此处指向无法指向vm，所以要引入store\n    headers: {\n      Authorization: store.state.token\n    }\n  });\n}; // 获得用户信息--新\n\nexport const getUserInfoAPINew = () => {\n  return myAxiosNew({\n    url: '/info',\n    // method不屑默认就是‘get’方式请求\n    method: 'GET',\n    // 传参给后台：params（查询字符串query）、data（请求体body）、headers（请求头）\n    // 由于this此处指向无法指向vm，所以要引入store\n    headers: {\n      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjY4MDY1MTg4LCJpYXQiOjE2NjgwNjE1ODgsImp0aSI6IjQ3N2JlZWVmOTllYjRmNTlhMzM5YjJkZWM3M2FiMTQ1IiwidXNlcl9pZCI6IjUyMjYyMTM2LTYwYjMtMTFlZC05ZmI5LTJhMjE1ZTM1OWZhMSJ9.EAjzcBHYbTa08CRKgM-pHqGgIsMw0iyN8V1P-2ZDWm8'\n    }\n  });\n}; // 更新头像信息\n\nexport const updateAvatarAPI = avatar => {\n  return myAxios({\n    url: '/my/update/avatar',\n    method: 'PATCH',\n    data: {\n      avatar\n    },\n    headers: {\n      Authorization: store.state.token\n    }\n  });\n};\n/**\r\n * 等待接口 用户个人信息\r\n */\n// export const saveUserInfoAPI = ({ name, age, birthday, briefInfo, contact, area }) => {\n//   return myAxios(\n//     {\n//       url: '',\n//       method: '',\n//       data: {\n//         name, age, birthday, briefInfo, contact, area\n//       },\n//       headers: { Authorization: store.state.token }\n//     }\n//   )\n// }\n\n/**\r\n * 等待接口 可以写死\r\n */\n// export const getBookSourseAPI = () => {\n//   return myAxios(\n//     {\n//       url: '',\n//       method: '',\n//       data: {},\n//       headers: {}\n//     }\n//   )\n// }\n\n/**\r\n * 获取题目资源\r\n */\n// export const getTestSourseAPI = () => {\n//   return myAxios(\n//     {\n//       url: '',\n//       method: '',\n//       data: {},\n//       headers: {}\n//     }\n//   )\n// }","map":{"version":3,"names":["myAxios","myAxiosNew","store","getListAPI","username","password","repassword","url","method","data","loginAPI","loginAPINew","getUserInfoAPI","headers","Authorization","state","token","getUserInfoAPINew","updateAvatarAPI","avatar"],"sources":["C:/Users/26421/Desktop/PTSFD/src/api/index.js"],"sourcesContent":["// 封装的是具体的接口请求方法\r\n// 注意：每个方法只负责请求一个url地址\r\nimport { myAxios, myAxiosNew } from '@/utils/request'\r\n// import {  } from '@/utils/request'\r\n// 引入store\r\nimport store from '../store/index'\r\n// 旧注册\r\nexport const getListAPI = ({ username, password, repassword }) => {\r\n  // 原地是一个Promise对象（内部包含原生ajax请求）\r\n  // return这个Promise对象到逻辑页面，去那边对Promise对象提取结果\r\n  return myAxios({\r\n    url: '/api/reg',\r\n    method: 'POST',\r\n    // axios传参params，data\r\n    // params的对象参数名和值，axios源码会把参数和值，拼接在url?后面给后台（query查询字符串）\r\n    // data的对象参数名和值，axios源码会把参数和值，拼接在请求体里（body参数）\r\n    data: {\r\n      username,\r\n      password,\r\n      repassword\r\n    }\r\n  })\r\n}\r\n// 新注册\r\n\r\n/**\r\n *\r\n * @param {*} param0 {username:用户名，password:密码}\r\n * @returns Promise对象\r\n */\r\n// 旧登录\r\nexport const loginAPI = ({ username, password }) => {\r\n  return myAxios({\r\n    url: '/api/login',\r\n    method: 'POST',\r\n    data: {\r\n      username,\r\n      password\r\n    }\r\n  })\r\n}\r\n// 新登录\r\nexport const loginAPINew = ({ username, password }) => {\r\n  return myAxiosNew({\r\n    url: '/user/auth',\r\n    method: 'POST',\r\n    data: {\r\n      username,\r\n      password\r\n    }\r\n  })\r\n}\r\n// 获得用户信息--旧\r\nexport const getUserInfoAPI = () => {\r\n  return myAxios({\r\n    url: '/my/userinfo',\r\n    // method不屑默认就是‘get’方式请求\r\n    method: 'GET',\r\n    // 传参给后台：params（查询字符串query）、data（请求体body）、headers（请求头）\r\n    // 由于this此处指向无法指向vm，所以要引入store\r\n    headers: { Authorization: store.state.token }\r\n  })\r\n}\r\n// 获得用户信息--新\r\nexport const getUserInfoAPINew = () => {\r\n  return myAxiosNew({\r\n    url: '/info',\r\n    // method不屑默认就是‘get’方式请求\r\n    method: 'GET',\r\n    // 传参给后台：params（查询字符串query）、data（请求体body）、headers（请求头）\r\n    // 由于this此处指向无法指向vm，所以要引入store\r\n    headers: { Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjY4MDY1MTg4LCJpYXQiOjE2NjgwNjE1ODgsImp0aSI6IjQ3N2JlZWVmOTllYjRmNTlhMzM5YjJkZWM3M2FiMTQ1IiwidXNlcl9pZCI6IjUyMjYyMTM2LTYwYjMtMTFlZC05ZmI5LTJhMjE1ZTM1OWZhMSJ9.EAjzcBHYbTa08CRKgM-pHqGgIsMw0iyN8V1P-2ZDWm8' }\r\n  })\r\n}\r\n\r\n// 更新头像信息\r\nexport const updateAvatarAPI = (avatar) => {\r\n  return myAxios({\r\n    url: '/my/update/avatar',\r\n    method: 'PATCH',\r\n    data: { avatar },\r\n    headers: { Authorization: store.state.token }\r\n  })\r\n}\r\n\r\n/**\r\n * 等待接口 用户个人信息\r\n */\r\n// export const saveUserInfoAPI = ({ name, age, birthday, briefInfo, contact, area }) => {\r\n//   return myAxios(\r\n//     {\r\n//       url: '',\r\n//       method: '',\r\n//       data: {\r\n//         name, age, birthday, briefInfo, contact, area\r\n//       },\r\n//       headers: { Authorization: store.state.token }\r\n//     }\r\n//   )\r\n// }\r\n\r\n/**\r\n * 等待接口 可以写死\r\n */\r\n// export const getBookSourseAPI = () => {\r\n//   return myAxios(\r\n//     {\r\n//       url: '',\r\n//       method: '',\r\n//       data: {},\r\n//       headers: {}\r\n//     }\r\n//   )\r\n// }\r\n\r\n/**\r\n * 获取题目资源\r\n */\r\n// export const getTestSourseAPI = () => {\r\n//   return myAxios(\r\n//     {\r\n//       url: '',\r\n//       method: '',\r\n//       data: {},\r\n//       headers: {}\r\n//     }\r\n//   )\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAAC;EAAEC,QAAF;EAAYC,QAAZ;EAAsBC;AAAtB,CAAD,KAAwC;EAChE;EACA;EACA,OAAON,OAAO,CAAC;IACbO,GAAG,EAAE,UADQ;IAEbC,MAAM,EAAE,MAFK;IAGb;IACA;IACA;IACAC,IAAI,EAAE;MACJL,QADI;MAEJC,QAFI;MAGJC;IAHI;EANO,CAAD,CAAd;AAYD,CAfM,C,CAgBP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,QAAQ,GAAG,CAAC;EAAEN,QAAF;EAAYC;AAAZ,CAAD,KAA4B;EAClD,OAAOL,OAAO,CAAC;IACbO,GAAG,EAAE,YADQ;IAEbC,MAAM,EAAE,MAFK;IAGbC,IAAI,EAAE;MACJL,QADI;MAEJC;IAFI;EAHO,CAAD,CAAd;AAQD,CATM,C,CAUP;;AACA,OAAO,MAAMM,WAAW,GAAG,CAAC;EAAEP,QAAF;EAAYC;AAAZ,CAAD,KAA4B;EACrD,OAAOJ,UAAU,CAAC;IAChBM,GAAG,EAAE,YADW;IAEhBC,MAAM,EAAE,MAFQ;IAGhBC,IAAI,EAAE;MACJL,QADI;MAEJC;IAFI;EAHU,CAAD,CAAjB;AAQD,CATM,C,CAUP;;AACA,OAAO,MAAMO,cAAc,GAAG,MAAM;EAClC,OAAOZ,OAAO,CAAC;IACbO,GAAG,EAAE,cADQ;IAEb;IACAC,MAAM,EAAE,KAHK;IAIb;IACA;IACAK,OAAO,EAAE;MAAEC,aAAa,EAAEZ,KAAK,CAACa,KAAN,CAAYC;IAA7B;EANI,CAAD,CAAd;AAQD,CATM,C,CAUP;;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrC,OAAOhB,UAAU,CAAC;IAChBM,GAAG,EAAE,OADW;IAEhB;IACAC,MAAM,EAAE,KAHQ;IAIhB;IACA;IACAK,OAAO,EAAE;MAAEC,aAAa,EAAE;IAAjB;EANO,CAAD,CAAjB;AAQD,CATM,C,CAWP;;AACA,OAAO,MAAMI,eAAe,GAAIC,MAAD,IAAY;EACzC,OAAOnB,OAAO,CAAC;IACbO,GAAG,EAAE,mBADQ;IAEbC,MAAM,EAAE,OAFK;IAGbC,IAAI,EAAE;MAAEU;IAAF,CAHO;IAIbN,OAAO,EAAE;MAAEC,aAAa,EAAEZ,KAAK,CAACa,KAAN,CAAYC;IAA7B;EAJI,CAAD,CAAd;AAMD,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}